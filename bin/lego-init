#!/usr/bin/env node

var color = require('lego-colorful').color;
var fs = require('fs');
var path = require('path');
var program = require('commander');
var legorc = require('legorc');
var vfs = require('vinyl-fs');
var gulpTemplate = require('gulp-template');
var inquirer = require('inquirer');
var semver = require('semver');
var emptyDir = require('empty-dir').sync;
var category = require('../lib/client').category;
var log = require('lego-log');

var NAME_REGEX = require('../lib/sdk/iduri').NAME_REGEX;


/*
  template directory
*/
var homeDir = process.env.HOME || process.env.USERPROFILE;
if (!homeDir) {
  homeDir = process.env.HOMEDRIVE + process.env.HOMEPATH;
}
var template = path.dirname(__dirname) + '/lib/template/';
template = template.replace(/^~/, homeDir);

/*
  program init
*/

program
  .usage('[options] name')
  .option('-r, --registry <url>', 'registry url of yuan server')

program.on('--help', function() {
  console.log();
  console.log('  Change init default template in ~/.lego/legorc');
  console.log();
  console.log(color.magenta('  [init]'));
  console.log('  template = ' + template);
  console.log();
});

program.parse(process.argv);

if (!emptyDir(process.cwd())) {
  console.warn(color.yellow('Existing files here, please run init command in an empty folder!'));
  return;
}


var questions = [{
  message: 'Package name',
  name: 'name',
  default: path.basename(process.cwd()),
  validate: function(input) {
    var done = this.async();
    if (!NAME_REGEX.test(input)) {
      console.warn(color.red('Must be only lowercase letters, numbers, dashes or dots, and start with lowercase letter.'));
      return;
    }
    done(true);
  }
}, {
  message: 'Version',
  name: 'version',
  default: '0.0.1',
  validate: function(input) {
    var done = this.async();
    if (!semver.valid(input)) {
      console.warn(color.red('Must be a valid semantic version (semver.org).'));
      return;
    }
    done(true);
  }
}, {
  message: 'Description',
  name: 'description',
  default: path.basename(process.cwd()),
}, {
  message: 'Author',
  name: 'author',
  default: require('whoami')
}];

var currentCategory = 1 , currentCategoryName = '基础组件';//默认分类


function doInquirer(){
  console.log('Creating a lego package: ');
  inquirer.prompt(questions, function( answers ) {
    
    //console.log(currentCategory);
    answers.category = currentCategory;
    answers.categoryName = currentCategoryName;

    answers.varName = answers.name.replace(/\-(\w)/g, function(all, letter){
      return letter.toUpperCase();
    });
    answers.yuanUrl = legorc.get('registry');

    console.log(answers);
    
    vfs.src(path.join(template, '**'), { dot: true })
      .pipe(gulpTemplate(answers))
      .pipe(vfs.dest('./'))
      .on('end', function() {
        // https://github.com/npm/npm/issues/1862
        fs.renameSync('./gitignore', './.gitignore');
        fs.renameSync('./legoignore', './.legoignore');
        fs.renameSync('./travis.yml', './.travis.yml');

        console.log();
        console.log(color.green('Initialize a lego package Succeccfully!'));
        console.log();
      });
  });
}

function getQuestions(data  , parent , list){
  list = list || [];

  var dataKey = data.key , dataItem = data.item;

  var parentKey = parent && parent.key || 0;
  var _item = {
    type : 'list',
    name : 'category:' + data.key,
    //name : data.item
    message : !data.key?'Select category on the registry server :' : ('Select category within ' + data.item + ' :'),
    filter : function(value){
      currentCategory =  _item.__choices && _item.__choices[value] || dataKey;
      currentCategoryName = value;
      console.log(currentCategory , currentCategoryName);
      return value;
    }
  }

  
  if(parent){
    _item.when = function(answers){
      //console.log(answers , dataKey , parentKey , '=============');
      if(answers['category:' + parentKey] == dataItem){
        return true;
      }else{
        return false;
      }
    } 
  }
  

  var nextData = [];

  if(data.list){
    _item.choices = [];
    _item.__choices = {};
    data.list.forEach(function(value , i){
      _item.choices.push(value.item);

      _item.__choices[value.item] = value.key;

      if(value.list){
        nextData.push(value);
      }
    });
  }

  list.push(_item);

  if(data.list){
    nextData.forEach(function(value , i){
      getQuestions(value  , data , list);
    });
  }

  return list;
}

console.log('loading the category on the registry server：');

category({
  registry: program.registry
}, function(err , data) {

  if (err || !data || !data.list) {

    log.error('exit', err.message);
    console.log();
    doInquirer();
    process.exit(2);
  }

  var list = getQuestions(data);

  questions = questions.concat(list);
  doInquirer();
});




